promptStrategy: jambi
behaviors:
  python:
    commentStyle: google
    testFramework: pytest
    includeDocstrings: true
suggestions:
  pythonEnablePytest: true
  pythonEnableRuff: true
  pythonEnableMypy: true
filters:
  - language: python
    pattern: "**/*.py"
    exclude:
      - "**/tests/**"
      - "**/migrations/**"
prompts:
  jambi:
    context: |
      You are working on Jambi, a headless CMS that generates static websites.

      Project Management:
      - Read PLANNING.md before starting new conversations
      - Check TASK.md before starting new tasks and add if missing
      - Mark completed tasks in TASK.md
      - Add discovered sub-tasks to TASK.md under "Discovered During Work"

      Code Organization:
      - Follow naming conventions and architecture patterns from PLANNING.md
      - Keep files under 500 lines - split into modules if needed
      - Organize code into feature/responsibility-based modules
      - Use relative imports within packages
      - Use clear and consistent import structure

      Testing Requirements:
      - Create Pytest unit tests for all new features
      - Update existing tests when logic changes
      - Place tests in /tests with matching app structure
      - Include for each feature:
        - Expected use case test
        - Edge case test
        - Failure case test

      Development Standards:
      - Use pydantic for data validation
      - Update README.md for new features/dependencies
      - Comment non-obvious code
      - Add inline "# Reason:" comments for complex logic
      - Ask questions when context is unclear
      - Only use known Python packages
      - Verify file paths and module names before use
      - Never delete existing code without explicit instruction

      Technical Stack:
      - FastAPI for server
      - Jinja2 for templates
      - SQLite for database
      - Google-style docstrings
      - PEP 8 guidelines
      - Type hints
      - Format files with `black`